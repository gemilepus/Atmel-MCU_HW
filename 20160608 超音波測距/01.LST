C51 COMPILER V9.00   01                                                                    06/08/2016 09:27:58 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE 01
OBJECT MODULE PLACED IN 01.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE 01.c BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          //*******************************************************************
   2          // CPU : Megawin MPC89x515A @ 11.0592 MHz
   3          //*******************************************************************
   4          #include "AT89X52.H"   //暫存器及組態定義
   5          #include "bin.c"
   6          //********************** functions ***************************
   7          void delay_1ms(int count);
   8          void trig_out(void);
   9          void LEDTypeError(void);
  10          void LEDTypeLoad(void);
  11          //********************** Parameter ***************************
  12          sbit trigPin = 0xB0;
  13          sbit echoPin = 0xB1;
  14          //sfr trigPin = P3_0;
  15          //sfr echoPin = P3_1;
  16          sfr  Data=0x80;//P0資料
  17          sfr  LEDScan=0x90;//P1資料
  18          sfr  CScan=0xA0;//P2資料
  19          char code Column_Scan[4]= {0xFE,0xFD,0xFB,0xF7};
  20          char code Seg_Row_Data[19]= { 0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x98,0x88,0x83,0xC6,0xA1,0x86,0
             -x8E,0x92,0x8C,0xF7};//0~F
  21          //********************** Variables ***************************
  22          main()
  23          { 
  24   1      int i=0,LED_TEMP[4]={0,0,0,0},TEMP,deTime=0,KeydeTime=6000,cnt,chcnt,cuta,cutb,OFFLED=0;
  25   1      int A_KEY=0,F_KEY=0,E_KEY=0,Key_Scan,Command_SCAN,KET_TEMP[4]={0,0,0,0};
  26   1        trigPin = 0;
  27   1      while(1)
  28   1      {   LEDScan=0xFF;
  29   2          if(i==1&&OFFLED==0){
  30   3            Data=Seg_Row_Data[LED_TEMP[i]]^0x80;
  31   3        }
  32   2        else{
  33   3          Data=Seg_Row_Data[LED_TEMP[i]];
  34   3        }
  35   2          LEDScan=Column_Scan[i];
  36   2          Key_Scan=CScan&0x0F;
  37   2          if(KeydeTime!=0)KeydeTime--; 
  38   2          if((Key_Scan!=0x0F)&&(KeydeTime==0)){   
  39   3              KeydeTime=6000;
  40   3            if (Key_Scan==0x07) {
  41   4                TEMP=i*4;//0 4 8 12 ~ 0 4 8 C
  42   4          }
  43   3              else if(Key_Scan==0x0B){
  44   4                TEMP=i*4+1;//1 5 9 13 ~ 1 5 9 D
  45   4          } 
  46   3              else if(Key_Scan==0x0D){
  47   4                TEMP=i*4+2;//2 6 10 14 ~ 2 6 A E
  48   4          } 
  49   3              else if(Key_Scan==0x0E){
  50   4                TEMP=i*4+3;//3 7 11 15 ~ 3 7 B F
  51   4          }
  52   3          if(TEMP<10){
  53   4            KET_TEMP[3]=KET_TEMP[2];
  54   4            KET_TEMP[2]=KET_TEMP[1];
C51 COMPILER V9.00   01                                                                    06/08/2016 09:27:58 PAGE 2   

  55   4            KET_TEMP[1]=KET_TEMP[0];
  56   4            KET_TEMP[0]=TEMP;
  57   4          }
  58   3          else{
  59   4            Command_SCAN=TEMP;
  60   4          }
  61   3          }    
  62   2        if(Command_SCAN!=0){  
  63   3             if(Command_SCAN==10){// A 持續測距 
  64   4                A_KEY=1;
  65   4           }
  66   3             if(Command_SCAN==11){// B 暫停測距 
  67   4                A_KEY=0;
  68   4           }     
  69   3             if(Command_SCAN==12){// C 結束 
  70   4                A_KEY=0;
  71   4                E_KEY=0;
  72   4                F_KEY=0;
  73   4                LED_TEMP[3]=LED_TEMP[2]=LED_TEMP[1]=LED_TEMP[0]=0; 
  74   4           }
  75   3             if(Command_SCAN==15){// F  
  76   4                A_KEY=0;
  77   4                F_KEY=1;
  78   4           }   
  79   3             if(Command_SCAN==14){// E
  80   4              LEDTypeLoad();  
  81   4                chcnt=KET_TEMP[3]*1000+KET_TEMP[2]*100+KET_TEMP[1]*10+KET_TEMP[0];
  82   4                if(chcnt>=1500||F_KEY==0){
  83   5                   LEDTypeError();
  84   5            }
  85   4            else{
  86   5               F_KEY=0;
  87   5               E_KEY=1;
  88   5            }
  89   4           }                 
  90   3           Command_SCAN=0;
  91   3        }
  92   2        if(E_KEY==1&&deTime==4000){//
  93   3        deTime=0;cnt=0;
  94   3        trig_out();
  95   3        while(echoPin == 0);  
  96   3        while(echoPin == 1 && cnt < 3000){
  97   4          cnt++;
  98   4        } 
  99   3          cnt=cnt*3;
 100   3        cuta=(chcnt*9)/10;
 101   3        cutb=(chcnt*11)/10;
 102   3        if(cnt>=cuta&&cnt<=cutb){
 103   4            LED_TEMP[3]=17;
 104   4            LED_TEMP[2]=10;
 105   4            LED_TEMP[1]=16;
 106   4            LED_TEMP[0]=16; 
 107   4            OFFLED=1;   
 108   4        }
 109   3        else{
 110   4            LED_TEMP[3]=cnt/1000;
 111   4            LED_TEMP[2]=cnt% 1000 / 100;
 112   4            LED_TEMP[1]=cnt% 100 / 10;
 113   4            LED_TEMP[0]=cnt%10; 
 114   4          OFFLED=0;   
 115   4               if(cnt>=3000){
 116   5            LED_TEMP[3]=18;
C51 COMPILER V9.00   01                                                                    06/08/2016 09:27:58 PAGE 3   

 117   5            LED_TEMP[2]=18;
 118   5            LED_TEMP[1]=18;
 119   5            LED_TEMP[0]=18; 
 120   5         }    
 121   4        }      
 122   3          } 
 123   2        if(F_KEY==1){//
 124   3            LED_TEMP[3]=KET_TEMP[3];
 125   3            LED_TEMP[2]=KET_TEMP[2];
 126   3            LED_TEMP[1]=KET_TEMP[1];
 127   3            LED_TEMP[0]=KET_TEMP[0];     
 128   3          }       
 129   2          if(deTime<4000)deTime++;
 130   2          if(A_KEY==1&&deTime==4000){
 131   3        deTime=0;cnt=0;
 132   3        trig_out();
 133   3        while(echoPin == 0);  
 134   3        while(echoPin == 1 && cnt < 3000){
 135   4          cnt++;
 136   4        } 
 137   3        cnt=cnt*3;
 138   3          LED_TEMP[3]=cnt/1000;
 139   3          LED_TEMP[2]=cnt% 1000 / 100;
 140   3          LED_TEMP[1]=cnt% 100 / 10;
 141   3          LED_TEMP[0]=cnt%10;
 142   3           if(cnt>=3000){
 143   4            LED_TEMP[3]=18;
 144   4            LED_TEMP[2]=18;
 145   4            LED_TEMP[1]=18;
 146   4            LED_TEMP[0]=18; 
 147   4         }
 148   3          }
 149   2        i++;if(i==4)i=0;
 150   2      }
 151   1      }
 152          //-----------------------------------------------------------------
 153          void trig_out()
 154          { 
 155   1        int i;
 156   1        trigPin = 1;
 157   1        for(i = 0; i < 125; i ++);   
 158   1        trigPin = 0;
 159   1      }
 160          void LEDTypeLoad(void){
 161   1        int f;
 162   1        for(f=3;f>=0;f--){
 163   2           LEDScan=Column_Scan[f];
 164   2            Data=B1111_1011;delay_1ms(150);
 165   2                  P0=B1111_1101;delay_1ms(150);
 166   2                  P0=B1111_1110;delay_1ms(150);
 167   2                  P0=B1101_1111;delay_1ms(150);
 168   2                  P0=B1110_1111;delay_1ms(150);
 169   2                  P0=B1111_1111;delay_1ms(150);
 170   2                  P0=B0111_1111;delay_1ms(150); 
 171   2              }
 172   1      }
 173          void LEDTypeError(void){
 174   1        char code Errortype[13]={0xFF,0xFF,0xFF,0xFF,0x86,0xAF,0xAF,0xA3,0xAF,0xFF,0xFF,0xFF,0xFF};
 175   1        int i=0,j=0,k=3,deTime=0;;
 176   1        while(1) {
 177   2          LEDScan=0xFF;
 178   2          Data=Errortype[j+k];
C51 COMPILER V9.00   01                                                                    06/08/2016 09:27:58 PAGE 4   

 179   2            LEDScan=Column_Scan[i];
 180   2            deTime++;
 181   2            if(deTime==6000){
 182   3                j++;
 183   3              deTime=0; 
 184   3          }
 185   2            if(j==10)break;
 186   2            i++;if(i==4)i=0;
 187   2            k--;if(k==-1)k=3;
 188   2        }
 189   1      }
 190          void delay_1ms(int count)
 191          { int i,j;
 192   1         for(i=0;i<count;i++) for(j=0;j<40;j++);
 193   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1396    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      44
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
